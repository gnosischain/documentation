"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[93266],{20768:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(74848),s=n(28453);const o={description:"Detecting that MetaMask is installed and adding additional networks and custom tokens easily make a great dApp user experience, specially those who are not technically skilled. It is important to streamline the onboarding process as much as you can to make it easier for consumers to operate your application. This guide explains how to build a simple button for your front-end application that will automatically add Gnosis to MetaMask.",keywords:["metamask","metamask api","detect metamask","detect chainid","detect account"]},r="MetaMask API",i={id:"developers/interact/metamask",title:"MetaMask API",description:"Detecting that MetaMask is installed and adding additional networks and custom tokens easily make a great dApp user experience, specially those who are not technically skilled. It is important to streamline the onboarding process as much as you can to make it easier for consumers to operate your application. This guide explains how to build a simple button for your front-end application that will automatically add Gnosis to MetaMask.",source:"@site/docs/developers/interact/metamask.mdx",sourceDirName:"developers/interact",slug:"/developers/interact/metamask",permalink:"/developers/interact/metamask",draft:!1,unlisted:!1,editUrl:"https://github.com/gnosischain/documentation/tree/main/docs/developers/interact/metamask.mdx",tags:[],version:"current",lastUpdatedBy:"Ale Banzas",lastUpdatedAt:1685463364,formattedLastUpdatedAt:"May 30, 2023",frontMatter:{description:"Detecting that MetaMask is installed and adding additional networks and custom tokens easily make a great dApp user experience, specially those who are not technically skilled. It is important to streamline the onboarding process as much as you can to make it easier for consumers to operate your application. This guide explains how to build a simple button for your front-end application that will automatically add Gnosis to MetaMask.",keywords:["metamask","metamask api","detect metamask","detect chainid","detect account"]},sidebar:"developers",previous:{title:"Useful Contracts",permalink:"/developers/getting-started/contracts"},next:{title:"Using Web3.js",permalink:"/developers/interact/web3-js"}},l={},c=[{value:"Summary of actions",id:"summary-of-actions",level:2},{value:"Detect MetaMask",id:"detect-metamask",level:2},{value:"Detect Gnosis",id:"detect-gnosis",level:2},{value:"Detect account",id:"detect-account",level:2},{value:"Add Custom Token to MetaMask",id:"add-custom-token-to-metamask",level:2},{value:"Live example",id:"live-example",level:2},{value:"More info",id:"more-info",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"metamask-api",children:"MetaMask API"}),"\n",(0,a.jsx)(t.p,{children:"Detecting that MetaMask is installed and adding additional networks and custom tokens easily make a great dApp user experience, specially those who are not technically skilled. It is important to streamline the onboarding process as much as you can to make it easier for consumers to operate your application. This guide explains how to build a simple button for your front-end application that will automatically add Gnosis to MetaMask."}),"\n",(0,a.jsx)(t.h2,{id:"summary-of-actions",children:"Summary of actions"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"Detect MetaMask or propose its installation"}),"\n",(0,a.jsx)(t.li,{children:"Detect ChainId, and propose to add Gnosis if needed"}),"\n",(0,a.jsx)(t.li,{children:"Detect Account, and propose to connect if needed"}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"detect-metamask",children:"Detect MetaMask"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",metastring:"showLineNumbers",children:"if (typeof window.ethereum !== 'undefined') {\r\n  console.log('MetaMask is installed!');\r\n  //TODO: propose users to install MetaMask\r\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"detect-gnosis",children:"Detect Gnosis"}),"\n",(0,a.jsx)(t.p,{children:"The following code includes all the parameters needed by MetaMask to add Gnosis to its networks programmatically"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",metastring:"showLineNumbers",children:'var GNOSIS_MAINNET_PARAMS = {\r\n    chainId: "0x64",\r\n    chainName: "Gnosis",\r\n    nativeCurrency: {\r\n        name: "xDai",\r\n        symbol: "XDAI",\r\n        decimals: 18,\r\n    },\r\n    rpcUrls: ["https://rpc.gnosischain.com/"],\r\n    blockExplorerUrls: ["https://gnosisscan.io/"],\r\n}\r\n\r\nvar addGnosisToMetaMask = function() {\r\n    window.ethereum.request({\r\n        method: "wallet_addEthereumChain",\r\n        params: [GNOSIS_MAINNET_PARAMS],\r\n    })\r\n    .catch((error) => {\r\n        console.log(error);\r\n    });\r\n};\n'})}),"\n",(0,a.jsx)(t.h2,{id:"detect-account",children:"Detect account"}),"\n",(0,a.jsx)(t.p,{children:"Our dApps need access to the user's account, follow this code example to get it:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",metastring:"showLineNumbers",children:"var getAccount = async function(){\r\n    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n    // MetaMask provide a single account\r\n    console.log(accounts[0]);\r\n    alert(accounts[0]);\r\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"add-custom-token-to-metamask",children:"Add Custom Token to MetaMask"}),"\n",(0,a.jsxs)(t.p,{children:["In addition to directing the user to ",(0,a.jsx)(t.a,{href:"https://metamask.zendesk.com/hc/en-us/articles/360015489031-How-to-add-unlisted-tokens-custom-tokens-in-MetaMask#h_01FWH492CHY60HWPC28RW0872H",children:"manually import tokens using the MetaMask UI"}),",\r\nyou can add code to your dApp's front end to prompt the user to add it to their MetaMask wallet automatically. This can be done using the ",(0,a.jsxs)(t.a,{href:"https://docs.metamask.io/guide/rpc-api.html#wallet-watchasset",children:[(0,a.jsx)(t.code,{children:"wallet_watchAsset"})," method"]}),". To do so, add the following code to your dApp's front end:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",metastring:"showLineNumbers",children:"const tokenAddress = 'custom-token-address-on-gnosis';\r\nconst tokenSymbol = 'your-token-symbol';\r\nconst tokenDecimals = 18; //or how ever many decimals\r\nconst tokenImage = 'your-token-image-url';\r\n\r\ntry {\r\n  // wasAdded is a boolean. Like any RPC method, an error may be thrown.\r\n  const wasAdded = window.ethereum.request({\r\n    method: 'wallet_watchAsset',\r\n    params: {\r\n      type: 'ERC20', // Initially only supports ERC20, but eventually more!\r\n      options: {\r\n        address: tokenAddress, // The address that the token is at.\r\n        symbol: tokenSymbol, // A ticker symbol or shorthand, up to 5 chars.\r\n        decimals: tokenDecimals, // The number of decimals in the token\r\n        image: tokenImage, // A string url of the token logo\r\n      },\r\n    },\r\n  });\r\n\r\n  if (wasAdded) {\r\n    console.log('Token Added');\r\n  } else {\r\n    console.log('Failed to add');\r\n  }\r\n} catch (error) {\r\n  console.log(error);\r\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"live-example",children:"Live example"}),"\n",(0,a.jsxs)(t.p,{children:["This documentation site is built in ReactJS, check ",(0,a.jsx)(t.a,{href:"/live-samples/metamask-add-button",children:"this sample page"})," to see the above code in action."]}),"\n",(0,a.jsx)(t.h2,{id:"more-info",children:"More info"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Read more about ",(0,a.jsx)(t.a,{href:"https://consensys.net/blog/metamask/connect-users-to-layer-2-networks-with-the-metamask-custom-networks-api/",children:"Connect Users To Layer 2 Networks With The MetaMask Custom Networks API"})," on the MetaMask Blog."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"https://eips.ethereum.org/EIPS/eip-3085",children:"EIP-3085"})," is an ",(0,a.jsx)(t.a,{href:"https://eips.ethereum.org/",children:"Ethereum Improvement Proposal"})," that defines an RPC method for adding Ethereum-compatible chains to wallet applications."]}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://docs.metamask.io/guide/ethereum-provider.html#table-of-contents",children:"Full API for the window.ethereum object"})}),"\n"]})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var a=n(96540);const s={},o=a.createContext(s);function r(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);