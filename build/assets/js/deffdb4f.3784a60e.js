"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[22678],{49899:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>l});var i=r(74848),o=r(28453);const t={description:"Rainbow Kit + Wagmi is a popular combination of tools to connect the front end to the blockchain.  The following instructions are how to add Gnosis chain to the list of chains to be available to choose from based on Next.js installation.",keywords:["rainbow kit","wagmi","tools","front end","development","dapps"]},s="Using Rainbow Kit + Wagmi",a={id:"developers/interact/rainbowkit-wagmi",title:"Using Rainbow Kit + Wagmi",description:"Rainbow Kit + Wagmi is a popular combination of tools to connect the front end to the blockchain.  The following instructions are how to add Gnosis chain to the list of chains to be available to choose from based on Next.js installation.",source:"@site/docs/developers/interact/rainbowkit-wagmi.mdx",sourceDirName:"developers/interact",slug:"/developers/interact/rainbowkit-wagmi",permalink:"/developers/interact/rainbowkit-wagmi",draft:!1,unlisted:!1,editUrl:"https://github.com/gnosischain/documentation/tree/main/docs/developers/interact/rainbowkit-wagmi.mdx",tags:[],version:"current",lastUpdatedBy:"shuoer86",lastUpdatedAt:1698242087,formattedLastUpdatedAt:"Oct 25, 2023",frontMatter:{description:"Rainbow Kit + Wagmi is a popular combination of tools to connect the front end to the blockchain.  The following instructions are how to add Gnosis chain to the list of chains to be available to choose from based on Next.js installation.",keywords:["rainbow kit","wagmi","tools","front end","development","dapps"]},sidebar:"developers",previous:{title:"Using Ethers.js",permalink:"/developers/interact/ethers-js"},next:{title:"Using Dynamic",permalink:"/developers/interact/dynamic"}},c={},l=[{value:"Summary of actions",id:"summary-of-actions",level:2},{value:"Install Rainbow Kit + Wagmi",id:"install-rainbow-kit--wagmi",level:2},{value:"Preparing our _app.js",id:"preparing-our-_appjs",level:2},{value:"Understanding the Imports",id:"understanding-the-imports",level:2},{value:"Adding Gnosis Chain to List of Chains",id:"adding-gnosis-chain-to-list-of-chains",level:2}];function p(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"using-rainbow-kit--wagmi",children:"Using Rainbow Kit + Wagmi"}),"\n",(0,i.jsx)(e.p,{children:"Rainbow Kit + Wagmi is a popular combination of tools to connect the front end to the blockchain.  The following instructions are how to add Gnosis chain to the list of chains to be available to choose from based on Next.js installation."}),"\n",(0,i.jsx)(e.h2,{id:"summary-of-actions",children:"Summary of actions"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Install Rainbow Kit + Wagmi"}),"\n",(0,i.jsx)(e.li,{children:"Configure your _app.js file to add a custom RPC and custom chain (using Next.js)"}),"\n",(0,i.jsx)(e.li,{children:"Show Final Code Layout"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"install-rainbow-kit--wagmi",children:"Install Rainbow Kit + Wagmi"}),"\n",(0,i.jsxs)(e.p,{children:["Based on the following documentation from ",(0,i.jsx)(e.a,{href:"https://rainbowkit.com/docs/installation",children:"Rainbow Kit"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"showLineNumbers",children:"yarn add @rainbow-me/rainbowkit wagmi ethers\n"})}),"\n",(0,i.jsx)(e.h2,{id:"preparing-our-_appjs",children:"Preparing our _app.js"}),"\n",(0,i.jsx)(e.p,{children:"On a fresh install of Next.js and Wagmi, your code should look pretty bare:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"showLineNumbers",children:"import '../styles/globals.css'\r\n\r\nfunction MyApp({ Component, pageProps }) {\r\n  return <Component {...pageProps} />\r\n}\r\n\r\nexport default MyApp\r\n\n"})}),"\n",(0,i.jsx)(e.p,{children:"You want to import the rainbow kit and wagmi library files:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"showLineNumbers",children:"import '../styles/globals.css'\r\nimport '@rainbow-me/rainbowkit/styles.css';\r\nimport {\r\n  getDefaultWallets,\r\n  RainbowKitProvider,\r\n} from '@rainbow-me/rainbowkit';  \r\nimport {\r\n  chain,\r\n  configureChains,\r\n  createClient,\r\n  WagmiConfig,\r\n} from 'wagmi';\r\nimport { alchemyProvider } from 'wagmi/providers/alchemy';\r\nimport { publicProvider } from 'wagmi/providers/public';\r\n\r\n\r\n\r\nfunction MyApp({ Component, pageProps }) {\r\n  return <Component {...pageProps} />\r\n}\r\n\r\nexport default MyApp\r\n\n"})}),"\n",(0,i.jsx)(e.h2,{id:"understanding-the-imports",children:"Understanding the Imports"}),"\n",(0,i.jsx)(e.p,{children:"We are importing the styles for rainbow kit, already built in for us to use"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"showLineNumbers",children:"import '@rainbow-me/rainbowkit/styles.css';\n"})}),"\n",(0,i.jsx)(e.p,{children:"This imports the Default wallets (MetaMask, WalletConnect, Coinbase and Rainbow Wallet) and Brings in the Provider Wrapper for our _app.js object"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"showLineNumbers",children:"import {\r\n  getDefaultWallets,\r\n  RainbowKitProvider,\r\n} from '@rainbow-me/rainbowkit';\n"})}),"\n",(0,i.jsx)(e.p,{children:"This part is for the Wagmi configuration"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"chain"})," - brings in default chains included in Wagmi (ethereum, test nets, polygon, etc)"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"configureChains"})," - lets us modify the providers for our chains (we could use infura, alchemy, Ankr, Pokt, or any of our choosing)"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"createClient"})," - Lets us manage our Wallets (MetaMask, etc) and Providers(alchemy, ankr, etc)"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"WagmiConfig"})," - This is the wrapper for our entire _app.js object (since rainbow kit is dependent on Wagmi, it wraps over rainbow kit wrapper)"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"showLineNumbers",children:"import {\r\n  chain,\r\n  configureChains,\r\n  createClient,\r\n  WagmiConfig,\r\n} from 'wagmi';\n"})}),"\n",(0,i.jsxs)(e.p,{children:["The providers can be confusing the wagmi docs and the rainbow docs. In short, a feature of Wagmi is to have failover RPCs. Let's say we start with an alchemy RPC and that fails, then we can use an Ankr RPC and that fails and finally we can use the Public RPCs so that people can keep using our dapp even if our account API fails. Really useful for Wallet Connect and Coinbase Wallet. We are just importing providers here ",(0,i.jsx)(e.strong,{children:"(NOTE! Gnosis chain currently does NOT require an API key to deploy)"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"showLineNumbers",children:"import { alchemyProvider } from 'wagmi/providers/alchemy';\r\nimport { publicProvider } from 'wagmi/providers/public';\n"})}),"\n",(0,i.jsx)(e.p,{children:"Now Let's configure out imports, if you have been following the docs your code should look like this so far:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"showLineNumbers",children:"import '../styles/globals.css'\r\nimport '@rainbow-me/rainbowkit/styles.css';\r\nimport {\r\n  getDefaultWallets,\r\n  RainbowKitProvider,\r\n} from '@rainbow-me/rainbowkit';  \r\nimport {\r\n  chain,\r\n  configureChains,\r\n  createClient,\r\n  WagmiConfig,\r\n} from 'wagmi';\r\nimport { alchemyProvider } from 'wagmi/providers/alchemy';\r\nimport { publicProvider } from 'wagmi/providers/public';\r\n\r\n// Newly imported code here\r\n\r\nconst { chains, provider } = configureChains(\r\n  [chain.mainnet, chain.optimism, chain.arbitrum],\r\n  [\r\n    alchemyProvider({ alchemyId: process.env.ALCHEMY_ID }), //Alchemy API\r\n    publicProvider()\r\n  ]\r\n);\r\n\r\nconst { connectors } = getDefaultWallets({\r\n  appName: 'My RainbowKit App',\r\n  chains\r\n});\r\n\r\nconst wagmiClient = createClient({\r\n  autoConnect: true,\r\n  connectors,\r\n  provider\r\n})\r\n\r\n// new imported code stops here\r\n\r\nfunction MyApp({ Component, pageProps }) {\r\n  return <Component {...pageProps} />\r\n}\r\n\r\nexport default MyApp\n"})}),"\n",(0,i.jsx)(e.p,{children:"Breaking down what is happening here in the configuration"}),"\n",(0,i.jsx)(e.p,{children:'Setting up configureChains hook. Here we are using the tool to let our variables "chains" and "provider" know what chains we are using and what providers we are using.'}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"chains"})," is taking in mainnet, optimism and arbitrum. (Wagmi has a built in list of chains, if you want to add more you can type chain. and see the list of available prebuilt chains to choose from. We will add Gnosis in a bit)"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"provider"})," is taking in both Alchemy provider (with our API key - ",(0,i.jsx)(e.strong,{children:"Reminder GNOSIS does NOT require an API Key"}),") and public provider. We can also add more providers as well. So it will first go with Alchemy first and if it fails, then the public provider."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"showLineNumbers",children:"const { chains, provider } = configureChains(\r\n  [chain.mainnet, chain.optimism, chain.arbitrum,],\r\n  [\r\n    alchemyProvider({ alchemyId: process.env.ALCHEMY_ID }),\r\n    publicProvider()\r\n  ]\r\n);\n"})}),"\n",(0,i.jsx)(e.p,{children:'Setting our Default wallets. This sets up our variable "connectors" to accepts the chains that we just previously set in the "configureChains" and giving the app our name (we can change that to whatever we want, our Dapp Name)'}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"showLineNumbers",children:"const { connectors } = getDefaultWallets({\r\n  appName: 'My RainbowKit App',\r\n  chains\r\n});\n"})}),"\n",(0,i.jsx)(e.p,{children:'The createClient just puts it all together in a single Object call wagmiClient. We take "connectors" we just previously setup (this took in our chains we want to support) and our "Providers" (the RPCs we have setup) and bundle it up for wagmi to refer to. AutoConnect refers to connecting to the wallet on the refresh of the webpage.'}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"showLineNumbers",children:"const wagmiClient = createClient({\r\n  autoConnect: true,\r\n  connectors,\r\n  provider\r\n})\n"})}),"\n",(0,i.jsx)(e.p,{children:"Now that we have all the basic configurations setup, we can now wrap our _app.js object so wagmi and rainbowkit will function throughout our entire website. We are going to turn this part:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"showLineNumbers",children:"function MyApp({ Component, pageProps }) {\r\n  return <Component {...pageProps} />\r\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"into this:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"showLineNumbers",children:"function MyApp({ Component, pageProps }) {\r\n  return (\r\n    <WagmiConfig client={wagmiClient}>\r\n      <RainbowKitProvider chains={chains}>\r\n        <Component {...pageProps} />\r\n      </RainbowKitProvider>\r\n    </WagmiConfig>\r\n  );\r\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:'We just wrapped out website "object" with the RainbowKit wrapper and let it know we want to support these "chains" (the chains we chose in "configureChains"). Then we wrapped this entire wrapping with the WagmiConfig wrapper and set it to the wagmiClient (that set the type of wallets we will support and the RPC providers). That\'s a lot of wrapping but at the end, your _app.js file should look like this:'}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"showLineNumbers",children:'import "../styles/globals.css";\r\nimport "@rainbow-me/rainbowkit/styles.css";\r\nimport { getDefaultWallets, RainbowKitProvider } from "@rainbow-me/rainbowkit";\r\nimport { chain, configureChains, createClient, WagmiConfig } from "wagmi";\r\nimport { alchemyProvider } from "wagmi/providers/alchemy";\r\nimport { publicProvider } from "wagmi/providers/public";\r\n\r\nconst { chains, provider } = configureChains(\r\n  [chain.mainnet, chain.polygon, chain.optimism, chain.arbitrum],\r\n  [alchemyProvider({ alchemyId: process.env.ALCHEMY_ID }), publicProvider()]\r\n);\r\n\r\nconst { connectors } = getDefaultWallets({\r\n  appName: "My RainbowKit App",\r\n  chains,\r\n});\r\n\r\nconst wagmiClient = createClient({\r\n  autoConnect: true,\r\n  connectors,\r\n  provider,\r\n});\r\n\r\nfunction MyApp({ Component, pageProps }) {\r\n  return (\r\n    <WagmiConfig client={wagmiClient}>\r\n      <RainbowKitProvider chains={chains}>\r\n        <Component {...pageProps} />\r\n      </RainbowKitProvider>\r\n    </WagmiConfig>\r\n  );\r\n}\r\n\r\nexport default MyApp;\n'})}),"\n",(0,i.jsx)(e.h2,{id:"adding-gnosis-chain-to-list-of-chains",children:"Adding Gnosis Chain to List of Chains"}),"\n",(0,i.jsx)(e.p,{children:"On the top of our _app.js file, we import jsonRpcProvider"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"showLineNumbers",children:'import { alchemyProvider } from "wagmi/providers/alchemy";\r\nimport { publicProvider } from "wagmi/providers/public";\r\nimport { jsonRpcProvider } from \'wagmi/providers/jsonRpc\'; //<<< new RPC\r\n\n'})}),"\n",(0,i.jsxs)(e.p,{children:['Now that we imported it, we can add it to our "configureChains" hook and set it up. You will see the "jsonRpcProvider" is on the top of alchemy and public. ',(0,i.jsxs)(e.strong,{children:["It is manually setup to use the Gnosis Chain RPC (using ANKR for this example, but can use ",(0,i.jsx)(e.a,{href:"/tools/rpc/",children:"other RPCs providers"})," )"]}),", but want to show that you can use ANY RPC of your liking for this. You are not limited to the preset RPCs that wagmi supports. So now the order of failure would be , ankr, alchemy and then public RPCs (Note that Alchemy ",(0,i.jsx)(e.strong,{children:"does NOT currently"})," support Gnosis Chain, just using it as an example to help you understand the concept):"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"showLineNumbers",children:'const { chains, provider } = configureChains(\r\n  [chain.mainnet, chain.optimism, chain.arbitrum],\r\n  [\r\n    jsonRpcProvider({ rpc: () => ({ http: "https://rpc.ankr.com/gnosis" }) }),  //<<<< New RPC Provider\r\n    alchemyProvider({ alchemyId: process.env.ALCHEMY_ID }),\r\n    publicProvider(),\r\n    \r\n  ]\r\n);\n'})}),"\n",(0,i.jsx)(e.p,{children:"For simplicity, we will add the chain directly under the imports. (Networks can be setup in a separate file and imported in for a cleaner setup)."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"showLineNumbers",children:"/* adding gnosis network */\r\nconst GnosisChain = {\r\n  id: 100,\r\n  name: 'Gnosis Chain',\r\n  network: 'Gnosis',\r\n  nativeCurrency: {\r\n    decimals: 18,\r\n    name: 'xDai',\r\n    symbol: 'xDai',\r\n  },\r\n  rpcUrls: {\r\n    default: 'https://rpc.ankr.com/gnosis',\r\n  },\r\n  blockExplorers: {\r\n    default: { name: 'Gnosis Scan', url: 'https://gnosisscan.io/' },\r\n  },\r\n  iconUrls: [\"https://images.prismic.io/koinly-marketing/16d1deb7-e71f-48a5-9ee7-83eb0f7038e4_Gnosis+Chain+Logo.png\"],\r\n  testnet: false,\r\n}\n"})}),"\n",(0,i.jsxs)(e.p,{children:["Now we have a variable ",(0,i.jsx)(e.strong,{children:"GnosisChain"})," that I can add in in the list of networks I want to support."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"showLineNumbers",children:'const { chains, provider } = configureChains(\r\n  [chain.mainnet, chain.optimism, chain.arbitrum, GnosisChain], //  <<<<<< Gnosis Chain Addedd\r\n  [\r\n    jsonRpcProvider({ rpc: () => ({ http: "https://rpc.ankr.com/gnosis" }) }),  //<<<< New RPC Provider\r\n    alchemyProvider({ alchemyId: process.env.ALCHEMY_ID }),\r\n    publicProvider(),\r\n  ]\r\n);\n'})}),"\n",(0,i.jsx)(e.p,{children:"Now Gnosis Chain is supported. Unfortunately, it currently doesn't support icons for some networks such as Gnosis as of yet."}),"\n",(0,i.jsx)(e.h1,{id:"final-code",children:"Final Code"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",metastring:"showLineNumbers",children:'import "../styles/globals.css";\r\nimport "@rainbow-me/rainbowkit/styles.css";\r\nimport {\r\n  getDefaultWallets,\r\n  RainbowKitProvider,\r\n  darkTheme,\r\n  lightTheme,\r\n  midnightTheme,\r\n} from "@rainbow-me/rainbowkit";\r\nimport { chain, configureChains, createClient, WagmiConfig } from "wagmi";\r\nimport { publicProvider } from "wagmi/providers/public";\r\nimport { jsonRpcProvider } from "wagmi/providers/jsonRpc";\r\n\r\n\r\n/* adding gnosis network */\r\nconst GnosisChain = {\r\n  id: 100,\r\n  name: \'Gnosis Chain\',\r\n  network: \'Gnosis\',\r\n  nativeCurrency: {\r\n    decimals: 18,\r\n    name: \'xDai\',\r\n    symbol: \'xDai\',\r\n  },\r\n  rpcUrls: {\r\n    default: \'https://rpc.ankr.com/gnosis\',\r\n  },\r\n  blockExplorers: {\r\n    default: { name: \'Blockscout\', url: \'https://gnosisscan.io/\' },\r\n  },\r\n  iconUrls: ["https://images.prismic.io/koinly-marketing/16d1deb7-e71f-48a5-9ee7-83eb0f7038e4_Gnosis+Chain+Logo.png"],\r\n  testnet: false,\r\n}\r\n\r\n\r\nconst { chains, provider } = configureChains(\r\n  [GnosisChain], //  <<<<<< Gnosis Chain is now the only option any other network will say "wrong network"\r\n  [\r\n    jsonRpcProvider({ rpc: () => ({ http: "https://rpc.ankr.com/gnosis" }) }),  //<<<< New RPC Provider\r\n    publicProvider(),\r\n    // No need to alchemy\r\n  ]\r\n);\r\n\r\nconst { connectors } = getDefaultWallets({\r\n  appName: "My RainbowKit App",\r\n  chains,\r\n});\r\n\r\nconst wagmiClient = createClient({\r\n  autoConnect: true,\r\n  connectors,\r\n  provider,\r\n});\r\n\r\nfunction MyApp({ Component, pageProps }) {\r\n  return (\r\n    <WagmiConfig client={wagmiClient}>\r\n      <RainbowKitProvider chains={chains}>\r\n        <Component {...pageProps} />\r\n      </RainbowKitProvider>\r\n    </WagmiConfig>\r\n  );\r\n}\r\n\r\nexport default MyApp;\r\n\n'})}),"\n",(0,i.jsx)(e.p,{children:"With this final setup, you will now be able to support Gnosis chain with Rainbow Kit + Wagmi"})]})}function h(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(p,{...n})}):p(n)}},28453:(n,e,r)=>{r.d(e,{R:()=>s,x:()=>a});var i=r(96540);const o={},t=i.createContext(o);function s(n){const e=i.useContext(t);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),i.createElement(t.Provider,{value:e},n.children)}}}]);